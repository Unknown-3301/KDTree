#pragma kernel CSMain

static const int MaxDepth = 32;

struct KDTreeBranch
{
    int DivisionDimension;
    float DivisionValue;

    int BaseBranchIndex;
    int LowerBranchIndex;
    int HigherBranchIndex;
    int Leaf;

    int ElementsStartIndex;
    int ElementsCount;
};
struct Point
{
    float2 Position;
    float4 Color;
};

StructuredBuffer<Point> Points;
StructuredBuffer<KDTreeBranch> Branches;
StructuredBuffer<float> BranchesPositions;

float2 ScreenToWorld;

RWTexture2D<float4> Texture;

void SearchPoints(float2 pos, KDTreeBranch branch, inout Point closest, inout float sqrDis)
{
    int start = branch.ElementsStartIndex;
    int last = start + branch.ElementsCount - 1;

    for (int i = start; i <= last; i++)
    {
        float2 diff = pos - Points[i].Position;
        float s = diff.x * diff.x + diff.y * diff.y;
        
        if (s < sqrDis)
        {
            sqrDis = s;
            closest = Points[i];
        }
    }
}
int ChooseBranch(float2 pos, KDTreeBranch base)
{
    if (pos[base.DivisionDimension] <= base.DivisionValue)
    {
        return -1;
    }
    else
    {
        return 1;
    }
}
float KDBoxSqrDis(float2 pos, int branchIndex)
{
    int posIndex = branchIndex * 4; //4 because every branch has (minX, minY, maxX, maxY)
    float2 parMin = float2(BranchesPositions[posIndex], BranchesPositions[posIndex + 1]);
    float2 parMax = float2(BranchesPositions[posIndex + 2], BranchesPositions[posIndex + 3]);

    float2 clamped = clamp(pos, parMin, parMax);

    float2 diff = pos - clamped;
    
    return diff.x * diff.x + diff.y * diff.y;
}
Point SearchClosest(float2 pos)
{
    KDTreeBranch current = Branches[0];
    Point closest = Points[0];
    float sqrDis = 9999999;
    
    bool completness[MaxDepth]; //each bit represent a branch in the branch sequence. 0 means we didn't finish searching it and 1 means we have finished searching it.
    bool directions[MaxDepth]; //each bit represent a direction (lower or higher) in the branch sequence.
    
    for (int i = 0; i < MaxDepth; i++)
    {
        completness[i] = false;
        directions[i] = false;
    }
    
    int currentDepth = 0;
    int safetyLimit = 9999;
    int safetyLimitCounter = 0;

    bool wentdown = true;
    safetyLimitCounter = 0;
    
    while (safetyLimitCounter < safetyLimit)
    {
        safetyLimitCounter++;
        
        if (wentdown)
        {
            if (current.Leaf == 1)
            {
                SearchPoints(pos, current, closest, sqrDis);
                currentDepth--;
            
                if (currentDepth < 0)
                {
                    return closest;
                }
            
                current = Branches[current.BaseBranchIndex];
                wentdown = false;
            }
            else
            {
                int choice = ChooseBranch(pos, current);
                
                if (choice == -1)
                {
                    current = Branches[current.LowerBranchIndex];
                    directions[currentDepth] = false;
                }
                else
                {
                    current = Branches[current.HigherBranchIndex];
                    directions[currentDepth] = true;
                }
                
                currentDepth++;
                completness[currentDepth] = false;
            }
        }
        else
        {
            if (!completness[currentDepth])
            {
                KDTreeBranch newB = current;
                int index = 0;
                
                if (directions[currentDepth])
                {
                    newB = Branches[current.LowerBranchIndex];
                    index = current.LowerBranchIndex;
                }
                else
                {
                    newB = Branches[current.HigherBranchIndex];
                    index = current.HigherBranchIndex;
                }
                
                completness[currentDepth] = true;
            
                float sqr = KDBoxSqrDis(pos, index);
                
                if (sqr < sqrDis)
                {
                    current = newB;
                    currentDepth++;
                    completness[currentDepth] = false;
                    wentdown = true;
                }
            }
            else
            {
                currentDepth--;
                
                if (currentDepth < 0)
                {
                    return closest;
                }
                
                current = Branches[current.BaseBranchIndex];
            }
        }
    }
    
    return closest;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Texture.GetDimensions(width, height);
    
    if (id.x >= width || id.y >= height)
    {
        return;
    }
    
    //uint length, s;
    //Points.GetDimensions(length, s);
    
    //Point p = Points[0];
    //float sqrDis = 9999999;
    //for (int i = 0; i < length; i++)
    //{
    //    float2 diff = id.xy - (Points[i].Position);
    //    float s = diff.x * diff.x + diff.y * diff.y;
        
    //    if (s < sqrDis)
    //    {
    //        sqrDis = s;
    //        p = Points[i];
    //    }
    //}
    
    float2 uv = id.xy / float2(width, height) * 2 - 1;
    float2 pos = uv * ScreenToWorld;
    
    Point p = SearchClosest(pos);
    Texture[id.xy] = p.Color;
}
